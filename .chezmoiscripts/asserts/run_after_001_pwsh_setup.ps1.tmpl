{{- $powershell := .powershell | toJson | squote -}}
{{- $newPackagesToInstall := output "pwsh.exe" "-NoProfile" "-Command" (printf "$pwsh_data = %s | ConvertFrom-Json -AsHashTable; $pwsh_data.modules | Select-Object -ExpandProperty name | Sort-Object -Unique | Where-Object { -not (Get-Module -ListAvailable -Name $_) }" $powershell) | trim | lower -}}
{{- $executionPolicyMismatch := output "pwsh.exe" "-NoProfile" "-Command" (printf "[bool]((%s | ConvertFrom-Json -AsHashTable).ExecutionPolicy | Where-Object { $_.Scope -ne $null -and $_.ExecutionPolicy -ne $null } | ForEach-Object { (Get-ExecutionPolicy -Scope $_.Scope) -ne $_.ExecutionPolicy } | Measure-Object -Sum | Select-Object -ExpandProperty Sum)" $powershell) | trim | lower -}}
{{- if or (ne $newPackagesToInstall "") (eq $executionPolicyMismatch "true") -}}
echo "== {{ .chezmoi.sourceFile | trim }} =="

$pwsh_data = {{ $powershell }} | ConvertFrom-Json -AsHashTable
{{if (eq $executionPolicyMismatch "true") -}}
$pwsh_data.ExecutionPolicy | Where-Object { $_.Scope -ne $null -and $_.ExecutionPolicy -ne $null } | Sort-Object { 
    switch ($_.Scope) {
        'MachinePolicy' { 1 }
        'UserPolicy' { 2 }
        'Process' { 3 }
        'CurrentUser' { 4 }
        'LocalMachine' { 5 }
        default { 6 }
    }
} | ForEach-Object {
    $current = Get-ExecutionPolicy -Scope $_.Scope
    if ($current -ne $_.ExecutionPolicy) {
        Set-ExecutionPolicy @_ -Force -Verbose:$True
    }
}
{{end -}}

{{if (ne $newPackagesToInstall "") -}}
$pwsh_data.PSRepository | ForEach-Object {
    Set-PSRepository @_ -Verbose:$True
}
$pwsh_data.modules | Where-Object { $_.Scope -eq $null -or $_.Scope -eq "CurrentUser" } | Where-Object { -not (Get-Module -ListAvailable -Name $_.name) } | ForEach-Object {
    PowerShellGet\Install-Module @_ -Scope CurrentUser -Force:$False -Verbose:$True
}
{{end -}}
{{- end -}}
