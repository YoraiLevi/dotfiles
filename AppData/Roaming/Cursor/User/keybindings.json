[
    {
        "key": "shift+enter",
        "command": "jupyter.runcurrentcell",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-jupyter.runcurrentcell",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "shift+enter",
        "command": "jupyter.runByLineStop",
        "when": "notebookCellResource in 'jupyter.notebookeditor.runByLineCells'"
    },
    {
        "key": "ctrl+enter",
        "command": "-jupyter.runByLineStop",
        "when": "notebookCellResource in 'jupyter.notebookeditor.runByLineCells'"
    },
    {
        "key": "shift+enter",
        "command": "notebook.cell.executeAndFocusContainer",
        "when": "notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-notebook.cell.executeAndFocusContainer",
        "when": "notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "notebook.cell.insertCodeCellBelow",
        "when": "notebookCellListFocused && !inputFocus && notebookChatOuterFocusPosition == ''"
    },
    {
        "key": "ctrl+enter",
        "command": "-notebook.cell.insertCodeCellBelow",
        "when": "notebookCellListFocused && !inputFocus && notebookChatOuterFocusPosition == ''"
    },
    {
        "key": "ctrl+enter",
        "command": "jupyter.runcurrentcelladvance",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.runcurrentcelladvance",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "shift+alt+u",
        "command": "-extension.updateSettings"
    },
    {
        "key": "shift+alt+d",
        "command": "-extension.downloadSettings"
    },
    {
        "key": "ctrl+enter",
        "command": "notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && !inlineChatFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && !inlineChatFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "ctrl+enter",
        "command": "notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && notebookCellType == 'code' || editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && notebookCellType == 'code' || editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "ctrl+shift+a",
        "command": "-notification.acceptPrimaryAction",
        "when": "notificationToastsVisible"
    },
    {
        "key": "ctrl+shift+a",
        "command": "-notification.acceptPrimaryAction",
        "when": "notificationFocus || notificationToastsVisible"
    },
    {
        "key": "ctrl+shift+/",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+p",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.nextEditor",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.previousEditor",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "ctrl+pageup",
        "command": "-notebook.focusPreviousEditor",
        "when": "accessibilityModeEnabled && notebookCellEditorFocused"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-notebook.focusNextEditor",
        "when": "accessibilityModeEnabled && notebookCellEditorFocused"
    },
    {
        "key": "ctrl+alt+r",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "accessibilityModeEnabled && terminalFocus"
    },
    {
        "key": "ctrl+up",
        "command": "-search.action.focusSearchFromResults",
        "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+down",
        "command": "-workbench.action.terminal.focus",
        "when": "accessibilityModeEnabled && accessibleViewOnLastLine && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewOnLastLine && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "ctrl+up",
        "command": "-workbench.action.terminal.focusAccessibleBuffer",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+f2",
        "command": "-workbench.action.terminal.focusAccessibleBuffer",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.terminal.runRecentCommand",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
    },
    {
        "key": "shift+tab",
        "command": "-workbench.action.terminal.focusAccessibleBuffer",
        "when": "accessibilityModeEnabled && terminalHasBeenCreated && terminalTabFocusMode && !terminalAccessibleBufferFocus || accessibilityModeEnabled && terminalProcessSupported && terminalTabFocusMode && !terminalAccessibleBufferFocus"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.terminal.runRecentCommand",
        "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+a",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.showEditorsInActiveGroup",
                "workbench.action.quickOpenSelectNext",
            ]
        }
    },
    {
        "key": "ctrl+k ctrl+p",
        "command": "-workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+t",
        "command": "workbench.action.files.newUntitledFile",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
    },
    {
        "key": "ctrl+,",
        "command": "-workbench.action.openSettings"
    },
    {
        "key": "ctrl+k z",
        "command": "-workbench.action.toggleZenMode",
        "when": "!isAuxiliaryWindowFocusedContext"
    },
    {
        "key": "ctrl+shift+x",
        "command": "-workbench.view.extensions",
        "when": "viewContainer.workbench.view.extensions.enabled"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    // {
    //     "key": "ctrl+shift+c",
    //     "command": "copy-copy-paste.copy"
    // },
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.quickchat.toggle",
        "when": "chatIsEnabled"
    },
    {
        "key": "ctrl+l",
        "command": "-aichat.newchataction"
    },
    {
        "key": "ctrl+shift+l",
        "command": "-aichat.insertselectionintochat"
    },
    {
        "key": "ctrl+l",
        "command": "-workbench.action.chat.newChat",
        "when": "chatIsEnabled && inChat"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    // {
    //     "key": "ctrl+c",
    //     "command": "copy-copy-paste.copy"
    // },
    // {
    //     "key": "ctrl+c",
    //     "command": "-copy-copy-paste.copy",
    //     "when": "editorTextFocus"
    // },
    // {
    //     "key": "ctrl+x",
    //     "command": "copy-copy-paste.cut"
    // },
    // {
    //     "key": "ctrl+x",
    //     "command": "-copy-copy-paste.cut",
    //     "when": "editorTextFocus"
    // },
    {
        "key": "shift+insert",
        "command": "-editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+insert",
        "command": "-editor.action.clipboardCopyAction"
    },
    {
        "key": "ctrl+c",
        "command": "-workbench.action.terminal.copyAndClearSelection",
        "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalHasBeenCreated && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalFocus && terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
    },
    {
        "key": "ctrl+c",
        "command": "-workbench.action.terminal.copyAndClearSelection",
        "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
    },
    // {
    //     "key": "ctrl+c",
    //     "command": "editor.action.clipboardCopyAction",
    //     "when": "terminalTextSelected || terminalTextSelectedInFocused"
    // },
    // {
    //     "key": "ctrl+c",
    //     "command": "-editor.action.clipboardCopyAction"
    // },
    {
        "key": "ctrl+c",
        "command": "workbench.action.terminal.copySelection",
        "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
    },
    {
        "key": "ctrl+shift+n",
        "command": "-workbench.action.newWindow"
    },
    {
        "key": "ctrl+n",
        "command": "extension.multiCommand.execute",
        "args": {
            "sequence": [
                "workbench.action.newEmptyEditorWindow",
                "workbench.action.files.newUntitledFile",
            ]
        }
    },
    {
        "key": "tab",
        "command": "acceptSelectedSuggestion",
        "when": "!cpp.shouldAcceptTab && acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "tab",
        "command": "-acceptSelectedSuggestion",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+n",
        "command": "-editor.action.rejectGPT4",
        "when": "editorTextFocus && hasGPT4Diff"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.quickTextSearch"
    },
    {
        "key": "ctrl+p",
        "command": "-notebook.centerActiveCell",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+l",
        "command": "-notebook.centerActiveCell",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+/",
        "command": "-composer.cycleModel",
        "when": "composerFocused"
    },
    {
        "key": "ctrl+shift+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+.",
        "command": "-composer.cycleMode",
        "when": "composerFocused"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.closeActiveEditor",
        "when": "!composerFocused"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w",
        "command": "composer.closeComposerTab",
        "when": "composerFocused"
    },
    {
        "key": "ctrl+w",
        "command": "-composer.closeComposerTab",
        "when": "composerFocused"
    },
    {
        "key": "ctrl+tab",
        "command": "composer.nextChatTab",
        "when": "composerFocused"
    },
    {
        "key": "ctrl+]",
        "command": "-composer.nextChatTab",
        "when": "composerFocused"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "composer.previousChatTab",
        "when": "composerFocused"
    },
    {
        "key": "ctrl+[",
        "command": "-composer.previousChatTab",
        "when": "composerFocused"
    },
    {
        "key": "ctrl+p",
        "command": "composer.openAddContextMenu",
        "when": "composerFocused"
    },
    {
        "key": "ctrl+alt+p",
        "command": "-composer.openAddContextMenu",
        "when": "composerFocused"
    },
    {
        "key": "escape",
        "command": "composer.cancelComposerStep",
        "when": "composerFocused"
    },
    {
        "key": "ctrl+backspace",
        "command": "-composer.cancelComposerStep",
        "when": "composerFocused"
    },
    {
        "key": "ctrl+t",
        "command": "-composer.newComposerTab",
        "when": "composerFocused"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.chat.openEditSession",
        "when": "chatEditingParticipantRegistered && chatIsEnabled && view != 'workbench.panel.chat.view.edits'"
    },
    {
        "key": "ctrl+n",
        "command": "-composer.createNew",
        "when": "composerFocused || focusedView =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "shift+win+tab",
        "command": "-composer.selectPreviousComposer",
        "when": "view =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "win+tab",
        "command": "-composer.selectNextComposer",
        "when": "view =~ /^workbench.panel.aichat.view/"
    },
    {
        "key": "ctrl+`",
        "command": "workbench.debug.action.toggleRepl",
        "when": "workbench.panel.repl.view.active && debugState != 'inactive'"
    },
    {
        "key": "ctrl+shift+y",
        "command": "-workbench.debug.action.toggleRepl",
        "when": "workbench.panel.repl.view.active"
    },
    {
        "key": "ctrl+shift+alt+y",
        "command": "-workbench.debug.action.toggleRepl",
        "when": "workbench.panel.repl.view.active"
    },
    {
        "key": "ctrl+shift+u",
        "command": "-workbench.action.output.toggleOutput",
        "when": "workbench.panel.output.active"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+shift+e",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "explorerViewletVisible"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+i",
        "command": "composerMode.agent"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-notebook.cell.pasteAbove",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+alt+v",
        "command": "markdown.showPreview",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-markdown.showPreview",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    // Cursor
    // VSCODE
    //Remove all chord keys
    {
        "command": "-aiFeedback.action.open",
        "key": "ctrl+m ctrl+g"
    },
    {
        "command": "-copyRelativeFilePath",
        "key": "ctrl+k ctrl+shift+c",
        "when": "!editorFocus"
    },
    {
        "command": "-copyRelativeFilePath",
        "key": "ctrl+k ctrl+shift+c",
        "when": "editorFocus"
    },
    {
        "command": "-copyRelativeFilePath",
        "key": "ctrl+m ctrl+shift+c",
        "when": "!editorFocus"
    },
    {
        "command": "-copyRelativeFilePath",
        "key": "ctrl+m ctrl+shift+c",
        "when": "editorFocus"
    },
    {
        "command": "-editor.action.addCommentLine",
        "key": "ctrl+k ctrl+c",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "-editor.action.addCommentLine",
        "key": "ctrl+m ctrl+c",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "-editor.action.defineKeybinding",
        "key": "ctrl+k ctrl+k",
        "when": "resource == 'vscode-userdata:/c%3A/Users/Scott/AppData/Roaming/Code/User/keybindings.json' && resource == 'vscode-userdata:/c%3A/Users/Yorai/AppData/Roaming/Cursor/User/keybindings.json'"
    },
    {
        "command": "-editor.action.defineKeybinding",
        "key": "ctrl+m ctrl+k",
        "when": "resource == 'vscode-userdata:/c%3A/Users/Yorai/AppData/Roaming/Cursor/User/keybindings.json'"
    },
    {
        "command": "-editor.action.formatSelection",
        "key": "ctrl+k ctrl+f",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "command": "-editor.action.formatSelection",
        "key": "ctrl+m ctrl+f",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "command": "-editor.action.moveSelectionToNextFindMatch",
        "key": "ctrl+k ctrl+d",
        "when": "editorFocus"
    },
    {
        "command": "-editor.action.moveSelectionToNextFindMatch",
        "key": "ctrl+m ctrl+d",
        "when": "editorFocus"
    },
    {
        "command": "-editor.action.nextCommentingRange",
        "key": "ctrl+m ctrl+alt+down",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
    },
    {
        "command": "-editor.action.previousCommentingRange",
        "key": "ctrl+m ctrl+alt+up",
        "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
    },
    {
        "command": "-editor.action.removeCommentLine",
        "key": "ctrl+k ctrl+u",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "-editor.action.removeCommentLine",
        "key": "ctrl+m ctrl+u",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "-editor.action.revealDefinitionAside",
        "key": "ctrl+k f12",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "command": "-editor.action.revealDefinitionAside",
        "key": "ctrl+m ctrl+f12",
        "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor"
    },
    {
        "command": "-editor.action.revealDefinitionAside",
        "key": "ctrl+m f12",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "command": "-editor.action.selectFromAnchorToCursor",
        "key": "ctrl+k ctrl+k",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "command": "-editor.action.selectFromAnchorToCursor",
        "key": "ctrl+m ctrl+k",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "command": "-editor.action.setSelectionAnchor",
        "key": "ctrl+k ctrl+b",
        "when": "editorTextFocus"
    },
    {
        "command": "-editor.action.setSelectionAnchor",
        "key": "ctrl+m ctrl+b",
        "when": "editorTextFocus"
    },
    {
        "command": "-editor.action.showHover",
        "key": "ctrl+k ctrl+i",
        "when": "editorTextFocus"
    },
    {
        "command": "-editor.action.showHover",
        "key": "ctrl+m ctrl+i",
        "when": "editorTextFocus"
    },
    {
        "command": "-editor.action.trimTrailingWhitespace",
        "key": "ctrl+k ctrl+x",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "-editor.action.trimTrailingWhitespace",
        "key": "ctrl+m ctrl+x",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "command": "-editor.createFoldingRangeFromSelection",
        "key": "ctrl+k ctrl+,",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.createFoldingRangeFromSelection",
        "key": "ctrl+m ctrl+,",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.debug.action.showDebugHover",
        "key": "ctrl+k ctrl+i",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "command": "-editor.debug.action.showDebugHover",
        "key": "ctrl+m ctrl+i",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "command": "-editor.foldAll",
        "key": "ctrl+k ctrl+0",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldAll",
        "key": "ctrl+m ctrl+0",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldAllBlockComments",
        "key": "ctrl+k ctrl+/",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldAllBlockComments",
        "key": "ctrl+m ctrl+/",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldAllExcept",
        "key": "ctrl+k ctrl+-",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldAllExcept",
        "key": "ctrl+m ctrl+-",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldAllMarkerRegions",
        "key": "ctrl+k ctrl+8",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldAllMarkerRegions",
        "key": "ctrl+m ctrl+8",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel1",
        "key": "ctrl+k ctrl+1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel1",
        "key": "ctrl+m ctrl+1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel2",
        "key": "ctrl+k ctrl+2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel2",
        "key": "ctrl+m ctrl+2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel3",
        "key": "ctrl+k ctrl+3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel3",
        "key": "ctrl+m ctrl+3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel4",
        "key": "ctrl+k ctrl+4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel4",
        "key": "ctrl+m ctrl+4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel5",
        "key": "ctrl+k ctrl+5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel5",
        "key": "ctrl+m ctrl+5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel6",
        "key": "ctrl+k ctrl+6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel6",
        "key": "ctrl+m ctrl+6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel7",
        "key": "ctrl+k ctrl+7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldLevel7",
        "key": "ctrl+m ctrl+7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldRecursively",
        "key": "ctrl+k ctrl+[",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.foldRecursively",
        "key": "ctrl+m ctrl+[",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.removeManualFoldingRanges",
        "key": "ctrl+k ctrl+.",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.removeManualFoldingRanges",
        "key": "ctrl+m ctrl+.",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.toggleFold",
        "key": "ctrl+k ctrl+l",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.toggleFold",
        "key": "ctrl+m ctrl+l",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.toggleFoldRecursively",
        "key": "ctrl+m ctrl+shift+l",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.unfoldAll",
        "key": "ctrl+k ctrl+j",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.unfoldAll",
        "key": "ctrl+m ctrl+j",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.unfoldAllExcept",
        "key": "ctrl+k ctrl+=",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.unfoldAllExcept",
        "key": "ctrl+m ctrl+=",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.unfoldAllMarkerRegions",
        "key": "ctrl+k ctrl+9",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.unfoldAllMarkerRegions",
        "key": "ctrl+m ctrl+9",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.unfoldRecursively",
        "key": "ctrl+k ctrl+]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-editor.unfoldRecursively",
        "key": "ctrl+m ctrl+]",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "command": "-extension.clipToHtml",
        "key": "ctrl+k .",
        "when": "editorTextFocus"
    },
    {
        "command": "-extension.insertToc",
        "key": "ctrl+k t",
        "when": "editorTextFocus"
    },
    {
        "command": "-extension.saveToHtml",
        "key": "ctrl+k ,",
        "when": "editorTextFocus"
    },
    {
        "command": "-git.revertSelectedRanges",
        "key": "ctrl+k ctrl+r",
        "when": "editorTextFocus && !operationInProgress && resourceScheme == 'file'"
    },
    {
        "command": "-git.revertSelectedRanges",
        "key": "ctrl+k ctrl+r",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "command": "-git.stageSelectedRanges",
        "key": "ctrl+k ctrl+alt+s",
        "when": "editorTextFocus && !operationInProgress && resourceScheme == 'file'"
    },
    {
        "command": "-git.stageSelectedRanges",
        "key": "ctrl+k ctrl+alt+s",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "command": "-git.unstageSelectedRanges",
        "key": "ctrl+k ctrl+n",
        "when": "editorTextFocus && isInDiffEditor && isInDiffRightEditor && !operationInProgress && resourceScheme == 'git'"
    },
    {
        "command": "-git.unstageSelectedRanges",
        "key": "ctrl+k ctrl+n",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "command": "-gitlens.diffLineWithPrevious",
        "key": "ctrl+shift+g shift+,",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
    },
    {
        "command": "-gitlens.diffWithNext",
        "key": "ctrl+shift+g .",
        "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
    },
    {
        "command": "-gitlens.diffWithPrevious",
        "key": "ctrl+shift+g ,",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
    },
    {
        "command": "-gitlens.diffWithWorking",
        "key": "ctrl+shift+g shift+.",
        "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
    },
    {
        "command": "-gitlens.gitCommands",
        "key": "ctrl+shift+g /",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "command": "-gitlens.showQuickCommitFileDetails",
        "key": "ctrl+shift+g c",
        "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "command": "-gitlens.showQuickFileHistory",
        "key": "ctrl+shift+g h",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "command": "-gitlens.showQuickRepoHistory",
        "key": "ctrl+shift+g shift+h",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "command": "-gitlens.showQuickRepoStatus",
        "key": "ctrl+shift+g s",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "command": "-gitlens.toggleCodeLens",
        "key": "ctrl+shift+g shift+b",
        "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
    },
    {
        "command": "-gitlens.toggleFileBlame",
        "key": "ctrl+shift+g b",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:blameable'"
    },
    {
        "command": "-interactiveEditor.start",
        "key": "ctrl+k i",
        "when": "interactiveEditorHasProvider && !editorReadonly"
    },
    {
        "command": "-jupyter.changeCellToCode",
        "key": "ctrl+; c",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "command": "-jupyter.changeCellToMarkdown",
        "key": "ctrl+; m",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "command": "-jupyter.deleteCells",
        "key": "ctrl+; x",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "command": "-jupyter.insertCellAbove",
        "key": "ctrl+; a",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "command": "-jupyter.insertCellBelow",
        "key": "ctrl+; b",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "command": "-jupyter.insertCellBelowPosition",
        "key": "ctrl+; s",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "command": "-jupyter.moveCellsDown",
        "key": "ctrl+; d",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "command": "-jupyter.moveCellsUp",
        "key": "ctrl+; u",
        "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
    },
    {
        "command": "-keybindings.editor.addKeybinding",
        "key": "ctrl+k ctrl+a",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "command": "-keybindings.editor.addKeybinding",
        "key": "ctrl+m ctrl+a",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "command": "-keybindings.editor.defineWhenExpression",
        "key": "ctrl+k ctrl+e",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "command": "-keybindings.editor.defineWhenExpression",
        "key": "ctrl+m ctrl+e",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "command": "-list.showHover",
        "key": "ctrl+m ctrl+i",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "command": "-markdown.showPreviewToSide",
        "key": "ctrl+k v",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "command": "-markdown.showPreviewToSide",
        "key": "ctrl+k v",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "command": "-notebook.cell.changeLanguage",
        "key": "ctrl+k m",
        "when": "notebookCellEditable && notebookEditable && notebookEditorFocused"
    },
    {
        "command": "-notebook.cell.chat.start",
        "key": "ctrl+m i",
        "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "command": "-notebook.cell.collapseCellInput",
        "key": "ctrl+k ctrl+c",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
    },
    {
        "command": "-notebook.cell.collapseCellInput",
        "key": "ctrl+m ctrl+c",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
    },
    {
        "command": "-notebook.cell.collapseCellOutput",
        "key": "ctrl+k t",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "command": "-notebook.cell.collapseCellOutput",
        "key": "ctrl+m t",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "command": "-notebook.cell.expandCellInput",
        "key": "ctrl+k ctrl+c",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
    },
    {
        "command": "-notebook.cell.expandCellInput",
        "key": "ctrl+m ctrl+c",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
    },
    {
        "command": "-notebook.cell.expandCellOutput",
        "key": "ctrl+k t",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "command": "-notebook.cell.expandCellOutput",
        "key": "ctrl+m t",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "command": "-notebook.cell.split",
        "key": "ctrl+k ctrl+shift+\\",
        "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused"
    },
    {
        "command": "-notebook.cell.split",
        "key": "ctrl+m ctrl+shift+\\",
        "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused"
    },
    {
        "command": "-notebook.cell.toggleOutputScrolling",
        "key": "ctrl+k y",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus"
    },
    {
        "command": "-notebook.cell.toggleOutputScrolling",
        "key": "ctrl+m y",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus"
    },
    {
        "command": "-notifications.showList",
        "key": "ctrl+m ctrl+shift+n"
    },
    {
        "command": "-saveAll",
        "key": "ctrl+k s"
    },
    {
        "command": "-saveAll",
        "key": "ctrl+m s"
    },
    {
        "command": "-testing.cancelRun",
        "key": "ctrl+; ctrl+x"
    },
    {
        "command": "-testing.cancelRun",
        "key": "ctrl+; ctrl+x"
    },
    {
        "command": "-testing.coverageAll",
        "key": "ctrl+; ctrl+shift+a"
    },
    {
        "command": "-testing.coverageAtCursor",
        "key": "ctrl+; ctrl+shift+c",
        "when": "editorTextFocus"
    },
    {
        "command": "-testing.coverageCurrentFile",
        "key": "ctrl+; ctrl+shift+f",
        "when": "editorTextFocus"
    },
    {
        "command": "-testing.coverageLastRun",
        "key": "ctrl+; ctrl+shift+l"
    },
    {
        "command": "-testing.debugAll",
        "key": "ctrl+; ctrl+a"
    },
    {
        "command": "-testing.debugAll",
        "key": "ctrl+; ctrl+a"
    },
    {
        "command": "-testing.debugAtCursor",
        "key": "ctrl+; ctrl+c",
        "when": "editorTextFocus"
    },
    {
        "command": "-testing.debugAtCursor",
        "key": "ctrl+; ctrl+c",
        "when": "editorTextFocus"
    },
    {
        "command": "-testing.debugCurrentFile",
        "key": "ctrl+; ctrl+f",
        "when": "editorTextFocus"
    },
    {
        "command": "-testing.debugCurrentFile",
        "key": "ctrl+; ctrl+f",
        "when": "editorTextFocus"
    },
    {
        "command": "-testing.debugFailTests",
        "key": "ctrl+; ctrl+e"
    },
    {
        "command": "-testing.debugFailTests",
        "key": "ctrl+; ctrl+e"
    },
    {
        "command": "-testing.debugLastRun",
        "key": "ctrl+; ctrl+l"
    },
    {
        "command": "-testing.debugLastRun",
        "key": "ctrl+; ctrl+l"
    },
    {
        "command": "-testing.openOutputPeek",
        "key": "ctrl+; ctrl+m"
    },
    {
        "command": "-testing.openOutputPeek",
        "key": "ctrl+; ctrl+m"
    },
    {
        "command": "-testing.refreshTests",
        "key": "ctrl+; ctrl+r",
        "when": "testing.canRefresh"
    },
    {
        "command": "-testing.refreshTests",
        "key": "ctrl+; ctrl+r",
        "when": "testing.canRefresh"
    },
    {
        "command": "-testing.reRunFailTests",
        "key": "ctrl+; e"
    },
    {
        "command": "-testing.reRunFailTests",
        "key": "ctrl+; e"
    },
    {
        "command": "-testing.reRunLastRun",
        "key": "ctrl+; l"
    },
    {
        "command": "-testing.reRunLastRun",
        "key": "ctrl+; l"
    },
    {
        "command": "-testing.runAll",
        "key": "ctrl+; a"
    },
    {
        "command": "-testing.runAll",
        "key": "ctrl+; a"
    },
    {
        "command": "-testing.runAtCursor",
        "key": "ctrl+; c",
        "when": "editorTextFocus"
    },
    {
        "command": "-testing.runAtCursor",
        "key": "ctrl+; c",
        "when": "editorTextFocus"
    },
    {
        "command": "-testing.runCurrentFile",
        "key": "ctrl+; f",
        "when": "editorTextFocus"
    },
    {
        "command": "-testing.runCurrentFile",
        "key": "ctrl+; f",
        "when": "editorTextFocus"
    },
    {
        "command": "-testing.showMostRecentOutput",
        "key": "ctrl+; ctrl+o",
        "when": "testing.hasAnyResults"
    },
    {
        "command": "-testing.showMostRecentOutput",
        "key": "ctrl+; ctrl+o",
        "when": "testing.hasAnyResults"
    },
    {
        "command": "-testing.toggleInlineCoverage",
        "key": "ctrl+; ctrl+shift+i"
    },
    {
        "command": "-testing.toggleInlineTestOutput",
        "key": "ctrl+; ctrl+i"
    },
    {
        "command": "-testing.toggleInlineTestOutput",
        "key": "ctrl+; ctrl+i"
    },
    {
        "command": "-togglePeekWidgetFocus",
        "key": "ctrl+k f2",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "command": "-togglePeekWidgetFocus",
        "key": "ctrl+m f2",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "command": "-views.moveViewDown",
        "key": "ctrl+k down",
        "when": "focusedView != ''"
    },
    {
        "command": "-views.moveViewDown",
        "key": "ctrl+m down",
        "when": "focusedView != ''"
    },
    {
        "command": "-views.moveViewLeft",
        "key": "ctrl+k left",
        "when": "focusedView != ''"
    },
    {
        "command": "-views.moveViewLeft",
        "key": "ctrl+m left",
        "when": "focusedView != ''"
    },
    {
        "command": "-views.moveViewRight",
        "key": "ctrl+k right",
        "when": "focusedView != ''"
    },
    {
        "command": "-views.moveViewRight",
        "key": "ctrl+m right",
        "when": "focusedView != ''"
    },
    {
        "command": "-views.moveViewUp",
        "key": "ctrl+k up",
        "when": "focusedView != ''"
    },
    {
        "command": "-views.moveViewUp",
        "key": "ctrl+m up",
        "when": "focusedView != ''"
    },
    {
        "command": "-workbench.action.addComment",
        "key": "ctrl+m ctrl+alt+c",
        "when": "activeCursorHasCommentingRange"
    },
    {
        "command": "-workbench.action.closeAllEditors",
        "key": "ctrl+k ctrl+w"
    },
    {
        "command": "-workbench.action.closeAllEditors",
        "key": "ctrl+m ctrl+w"
    },
    {
        "command": "-workbench.action.closeAllGroups",
        "key": "ctrl+k ctrl+shift+w"
    },
    {
        "command": "-workbench.action.closeAllGroups",
        "key": "ctrl+m ctrl+shift+w"
    },
    {
        "command": "-workbench.action.closeEditorsInGroup",
        "key": "ctrl+k w"
    },
    {
        "command": "-workbench.action.closeEditorsInGroup",
        "key": "ctrl+m w"
    },
    {
        "command": "-workbench.action.closeFolder",
        "key": "ctrl+k f",
        "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
    },
    {
        "command": "-workbench.action.closeFolder",
        "key": "ctrl+m f",
        "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
    },
    {
        "command": "-workbench.action.closeUnmodifiedEditors",
        "key": "ctrl+k u"
    },
    {
        "command": "-workbench.action.closeUnmodifiedEditors",
        "key": "ctrl+m u"
    },
    {
        "command": "-workbench.action.compareEditor.openSide",
        "key": "ctrl+k shift+o",
        "when": "inDiffEditor"
    },
    {
        "command": "-workbench.action.compareEditor.openSide",
        "key": "ctrl+m shift+o",
        "when": "inDiffEditor"
    },
    {
        "command": "-workbench.action.copyEditorToNewWindow",
        "key": "ctrl+m o",
        "when": "activeEditor"
    },
    {
        "command": "-workbench.action.editor.changeLanguageMode",
        "key": "ctrl+k m",
        "when": "!notebookEditorFocused"
    },
    {
        "command": "-workbench.action.editor.changeLanguageMode",
        "key": "ctrl+m m",
        "when": "!notebookEditorFocused"
    },
    {
        "command": "-workbench.action.files.copyPathOfActiveFile",
        "key": "ctrl+k p"
    },
    {
        "command": "-workbench.action.files.copyPathOfActiveFile",
        "key": "ctrl+m p"
    },
    {
        "command": "-workbench.action.files.openFolder",
        "key": "ctrl+k ctrl+o",
        "when": "openFolderWorkspaceSupport"
    },
    {
        "command": "-workbench.action.files.openFolder",
        "key": "ctrl+m ctrl+o",
        "when": "openFolderWorkspaceSupport"
    },
    {
        "command": "-workbench.action.files.openLocalFolder",
        "key": "ctrl+k ctrl+o",
        "when": "remoteFileDialogVisible"
    },
    {
        "command": "-workbench.action.files.openLocalFolder",
        "key": "ctrl+m ctrl+o",
        "when": "remoteFileDialogVisible"
    },
    {
        "command": "-workbench.action.files.revealActiveFileInWindows",
        "key": "ctrl+k r"
    },
    {
        "command": "-workbench.action.files.revealActiveFileInWindows",
        "key": "ctrl+m r"
    },
    {
        "command": "-workbench.action.files.saveWithoutFormatting",
        "key": "ctrl+k ctrl+shift+s"
    },
    {
        "command": "-workbench.action.files.saveWithoutFormatting",
        "key": "ctrl+m ctrl+shift+s"
    },
    {
        "command": "-workbench.action.files.showOpenedFileInNewWindow",
        "key": "ctrl+k o",
        "when": "emptyWorkspaceSupport"
    },
    {
        "command": "-workbench.action.focusAboveGroup",
        "key": "ctrl+k ctrl+up"
    },
    {
        "command": "-workbench.action.focusAboveGroup",
        "key": "ctrl+m ctrl+up"
    },
    {
        "command": "-workbench.action.focusBelowGroup",
        "key": "ctrl+k ctrl+down"
    },
    {
        "command": "-workbench.action.focusBelowGroup",
        "key": "ctrl+m ctrl+down"
    },
    {
        "command": "-workbench.action.focusLeftGroup",
        "key": "ctrl+k ctrl+left"
    },
    {
        "command": "-workbench.action.focusLeftGroup",
        "key": "ctrl+m ctrl+left"
    },
    {
        "command": "-workbench.action.focusRightGroup",
        "key": "ctrl+k ctrl+right"
    },
    {
        "command": "-workbench.action.focusRightGroup",
        "key": "ctrl+m ctrl+right"
    },
    {
        "command": "-workbench.action.joinEditorInGroup",
        "key": "ctrl+k ctrl+shift+\\",
        "when": "sideBySideEditorActive"
    },
    {
        "command": "-workbench.action.joinEditorInGroup",
        "key": "ctrl+m ctrl+shift+\\",
        "when": "sideBySideEditorActive"
    },
    {
        "command": "-workbench.action.keepEditor",
        "key": "ctrl+k enter"
    },
    {
        "command": "-workbench.action.keepEditor",
        "key": "ctrl+m enter"
    },
    {
        "command": "-workbench.action.keybindingsReference",
        "key": "ctrl+k ctrl+r"
    },
    {
        "command": "-workbench.action.moveActiveEditorGroupDown",
        "key": "ctrl+k down"
    },
    {
        "command": "-workbench.action.moveActiveEditorGroupDown",
        "key": "ctrl+m down"
    },
    {
        "command": "-workbench.action.moveActiveEditorGroupLeft",
        "key": "ctrl+k left"
    },
    {
        "command": "-workbench.action.moveActiveEditorGroupLeft",
        "key": "ctrl+m left"
    },
    {
        "command": "-workbench.action.moveActiveEditorGroupRight",
        "key": "ctrl+k right"
    },
    {
        "command": "-workbench.action.moveActiveEditorGroupRight",
        "key": "ctrl+m right"
    },
    {
        "command": "-workbench.action.moveActiveEditorGroupUp",
        "key": "ctrl+k up"
    },
    {
        "command": "-workbench.action.moveActiveEditorGroupUp",
        "key": "ctrl+m up"
    },
    {
        "command": "-workbench.action.navigateToLastEditLocation",
        "key": "ctrl+k ctrl+q"
    },
    {
        "command": "-workbench.action.navigateToLastEditLocation",
        "key": "ctrl+m ctrl+q"
    },
    {
        "command": "-workbench.action.nextEditorInGroup",
        "key": "ctrl+k ctrl+pagedown"
    },
    {
        "command": "-workbench.action.nextEditorInGroup",
        "key": "ctrl+m ctrl+pagedown"
    },
    {
        "command": "-workbench.action.openGlobalKeybindings",
        "key": "ctrl+k ctrl+s"
    },
    {
        "command": "-workbench.action.openGlobalKeybindings",
        "key": "ctrl+m ctrl+s"
    },
    {
        "command": "-workbench.action.pinEditor",
        "key": "ctrl+k shift+enter",
        "when": "!activeEditorIsPinned"
    },
    {
        "command": "-workbench.action.pinEditor",
        "key": "ctrl+m shift+enter",
        "when": "!activeEditorIsPinned"
    },
    {
        "command": "-workbench.action.previousEditorInGroup",
        "key": "ctrl+k ctrl+pageup"
    },
    {
        "command": "-workbench.action.previousEditorInGroup",
        "key": "ctrl+m ctrl+pageup"
    },
    {
        "command": "-workbench.action.selectTheme",
        "key": "ctrl+k ctrl+t"
    },
    {
        "command": "-workbench.action.selectTheme",
        "key": "ctrl+m ctrl+t"
    },
    {
        "command": "-workbench.action.showAllEditors",
        "key": "ctrl+k ctrl+p"
    },
    {
        "command": "-workbench.action.showAllEditors",
        "key": "ctrl+m ctrl+p"
    },
    {
        "command": "-workbench.action.showHover",
        "key": "ctrl+k ctrl+i",
        "when": "!editorTextFocus"
    },
    {
        "command": "-workbench.action.showTreeHover",
        "key": "ctrl+k ctrl+i",
        "when": "customTreeView && listFocus && !inputFocus"
    },
    {
        "command": "-workbench.action.splitEditorDown",
        "key": "ctrl+k ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorDown",
        "key": "ctrl+m ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorInGroup",
        "key": "ctrl+k ctrl+shift+\\",
        "when": "activeEditorCanSplitInGroup"
    },
    {
        "command": "-workbench.action.splitEditorInGroup",
        "key": "ctrl+m ctrl+shift+\\",
        "when": "activeEditorCanSplitInGroup"
    },
    {
        "command": "-workbench.action.splitEditorLeft",
        "key": "ctrl+k ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorLeft",
        "key": "ctrl+m ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorOrthogonal",
        "key": "ctrl+k ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorOrthogonal",
        "key": "ctrl+m ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorRight",
        "key": "ctrl+k ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorRight",
        "key": "ctrl+m ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorUp",
        "key": "ctrl+k ctrl+\\"
    },
    {
        "command": "-workbench.action.splitEditorUp",
        "key": "ctrl+m ctrl+\\"
    },
    {
        "command": "-workbench.action.terminal.focusHover",
        "key": "ctrl+k ctrl+i",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus || terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalHasBeenCreated && terminalProcessSupported || terminalFocus && terminalIsOpen && terminalProcessSupported || terminalHasBeenCreated && terminalIsOpen && terminalTabsFocus || terminalHasBeenCreated && terminalProcessSupported && terminalTabsFocus || terminalIsOpen && terminalProcessSupported && terminalTabsFocus"
    },
    {
        "command": "-workbench.action.terminal.focusHover",
        "key": "ctrl+m ctrl+i",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "command": "-workbench.action.toggleMaximizeEditorGroup",
        "key": "ctrl+m ctrl+m",
        "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups"
    },
    {
        "command": "-workbench.action.toggleZenMode",
        "key": "ctrl+k z",
        "when": "!isAuxiliaryWindowFocusedContext"
    },
    {
        "command": "-workbench.action.toggleZenMode",
        "key": "ctrl+m z",
        "when": "!isAuxiliaryWindowFocusedContext"
    },
    {
        "command": "-workbench.action.unpinEditor",
        "key": "ctrl+k shift+enter",
        "when": "activeEditorIsPinned"
    },
    {
        "command": "-workbench.action.unpinEditor",
        "key": "ctrl+m shift+enter",
        "when": "activeEditorIsPinned"
    },
    {
        "command": "-workbench.files.action.compareWithClipboard",
        "key": "ctrl+k c"
    },
    {
        "command": "-workbench.files.action.compareWithClipboard",
        "key": "ctrl+m c"
    },
    {
        "command": "-workbench.files.action.compareWithSaved",
        "key": "ctrl+k d"
    },
    {
        "command": "-workbench.files.action.compareWithSaved",
        "key": "ctrl+m d"
    },
    {
        "command": "-workbench.files.action.focusOpenEditorsView",
        "key": "ctrl+k e",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "command": "-workbench.files.action.focusOpenEditorsView",
        "key": "ctrl+m e",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "command": "-workbench.view.scm",
        "key": "ctrl+shift+g g",
        "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "c",
        "command": "-notebook.cell.copy",
        "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused"
    },
    {
        "key": "ctrl+shift+c",
        "command": "editor.action.clipboardCopyAction"
    },
    {
        "key": "ctrl+shift+v",
        "command": "editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+shift+c",
        "command": "copyRelativeFilePath",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.action.focusSideBar",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+0",
        "command": "-workbench.action.focusSideBar"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!editorFocus"
    },
    {
        "key": "shift+alt+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.terminal.kill",
        "when": "terminalEditorFocus && !terminalFocus && terminalHasBeenCreated || !terminalEditorFocus && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "delete",
        "command": "-workbench.action.terminal.killInstance",
        "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.terminal.killActiveTab",
        "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "delete",
        "command": "-workbench.action.terminal.killActiveTab",
        "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalHasBeenCreated && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    }
]