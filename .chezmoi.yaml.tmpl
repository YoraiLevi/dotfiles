git:
  autoCommit : true
  # autoPush : true
  autoAdd: true

# merge:
#    command : "pwsh"
#    args : ["-Command", "cp {{ `{{ .Target }}` }} {{ `{{ .Target }}` }}.base && code --wait --new-window --merge {{ `{{ .Destination }}` }} {{ `{{ .Target  }}` }} {{ `{{ .Target }}` }}.base {{ `{{ .Source }}` }}"]

diff:
  exclude:
    - scripts

{{ if eq .chezmoi.os "windows" -}}
{{- $uvAvailable := output "powershell.exe" "-NoProfile" "-Command" "[bool](&{try {Get-Command uv.exe -ErrorAction Stop } catch {}})" | lower | trim -}}
{{- $pwshAvailable := output "powershell.exe" "-NoProfile" "-Command" "[bool](&{try {Get-Command pwsh.exe -ErrorAction Stop } catch {}})" | lower | trim -}}
{{- $pwshPathUnquoted := output "powershell.exe" "-NoProfile" "-Command" "(&{try { (Get-Command pwsh.exe, powershell.exe -Type Application -ErrorAction SilentlyContinue | Select-Object -First 1).Source} catch {}})" | trim -}}
{{- $pwshPath := $pwshPathUnquoted | squote -}}
{{- $wslAvailable := output "powershell.exe" "-NoProfile" "-Command" "[bool]((&{try { wsl --list --quiet } catch { }} | Out-String) -join ' ' -replace [char]0, '' -replace '\\s+', ' ')" | lower | trim -}}

cd: 
  command : "pwsh.exe"
data:
    BaseBoard : {{ output "powershell.exe" "-NoProfile" "if($ENV:SYSTEM_NAME){$ENV:SYSTEM_NAME}else{(Get-WmiObject -class Win32_BaseBoard).product}" | trim}}
    # https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-systemenclosure
    # https://techuisitive.com/enclosure-chassis-types-value-description-configmgr-sccm/?expand_article=1
    # Other (1)
    # Unknown (2)
    # Desktop (3)
    # Low Profile Desktop (4)
    # Pizza Box (5)
    # Mini Tower (6)
    # Tower (7)
    # Portable (8)
    # Laptop (9)
    # Notebook (10)
    # Hand Held (11)
    # Docking Station (12)
    # All in One (13)
    # Sub Notebook (14)
    # Space-Saving (15)
    # Lunch Box (16)
    # Main System Chassis (17)
    # Expansion Chassis (18)
    # SubChassis (19)
    # Bus Expansion Chassis (20)
    # Peripheral Chassis (21)
    # Storage Chassis (22)
    # Rack Mount Chassis (23)
    # Sealed-Case PC (24)
    # Tablet (30)
    # Convertible (31)
    # Detachable (32)
    ChassisType: {{ output "powershell.exe" "-NoProfile" "if($ENV:ChassisType){$ENV:ChassisType}else{(Get-CimInstance -ClassName Win32_SystemEnclosure).ChassisTypes}" | trim}}

    # https://learn.microsoft.com/en-us/windows/win32/cimwin32prov/win32-computersystem
    # Unspecified (0)
    # Desktop (1)
    # Mobile (2)
    # Workstation (3)
    # Enterprise Server (4)
    # SOHO Server (5)Small Office and Home Office (SOHO) Server
    # Appliance PC (6)
    # Performance Server (7)
    # Maximum (8)
    PCSystemType: {{ output "powershell.exe" "-NoProfile" "if($ENV:PCSystemType){$ENV:PCSystemType}else{(Get-WmiObject -Class Win32_ComputerSystem).PCSystemType}" | trim}}
    {{- if eq $wslAvailable "true" }}
    usernameWsl: {{ output "wsl" "whoami" | trim }}
    homeDirWsl: {{ output "wsl" "wslpath" "~/" | trim }}
    homedirWslWin: {{ output "wsl" "wslpath" "-w" "~/" | trim }}
    {{- end }}

#[edit]
#    command : "code-insders" # doesn't work with `chezmoi edit`, $ENV:EDITOR does work
#    flags : ["--wait"]



{{ output "powershell.exe" "-NoProfile" "-File" (printf "%s/.chezmoilib/generate_hooks.ps1" .chezmoi.sourceDir) (printf "%s/.chezmoihooks" .chezmoi.sourceDir) ($pwshPathUnquoted) | trim | fromJson | toYaml }}
interpreters:
  js :
    command : {{ $pwshPath }}
    args : ["-NoLogo", "-NoProfile", "-NonInteractive", '-File', "{{ .chezmoi.sourceDir }}/.chezmoiinterpreters/powershell_fake.ps1"]
  ts :
    command : {{ $pwshPath }}
    args : ["-NoLogo", "-NoProfile", "-NonInteractive", '-File', "{{ .chezmoi.sourceDir }}/.chezmoiinterpreters/powershell_fake.ps1"]
  py :
    {{- if eq $uvAvailable "true" }}
    command : 'uv.exe'
    args : ["run", "python", "-B", "-E"]
    {{- else }}
    command : 'python.exe'
    args : ["-B", "-E"]
    {{- end }}
  ps1 : 
    command : {{ $pwshPath }}
    args : ["-NoLogo", "-NoProfile", "-NonInteractive"]
  sh :
    command : {{ $pwshPath }}
  {{- if eq $wslAvailable "true" }}
    args : ["-NoLogo", "-NoProfile", "-NonInteractive", '-File', "{{ .chezmoi.sourceDir }}/.chezmoiinterpreters/wsl2_powershell_interpreter.ps1"]
  {{- else }}
    args : ["-NoLogo", "-NoProfile", "-NonInteractive", '-File', "{{ .chezmoi.sourceDir }}/.chezmoiinterpreters/powershell_fake.ps1"]
  {{- end }}
{{ end -}}