{{ if eq .chezmoi.os "windows" -}}
REM https://www.ninjaone.com/blog/understanding-powershell-execution-policies/ - Understanding PowerShell Execution Policies
REM We don't know the state of the system, need to setup execution policy to RemoteSigned or Bypass or Unrestricted
REM AllSigned: With this policy, all scripts, including those created locally, must be digitally signed by a trusted publisher to execute. This approach ensures that only authorized scripts are permitted to run, but does run the risk of running any malicious scripts that have been signed.
REM Bypass: This policy permits the execution of any script without restriction. This policy should be used with extreme caution, if at all, as it can potentially expose systems to security risks by permitting the execution of unsigned and unverified scripts.
REM Default: With this type of policy, the default execution is set. Default sets the execution policy as restricted for Windows clients, and RemoteSigned for Windows servers. Both types of execution policies are explained below.
REM RemoteSigned: This policy requires that scripts downloaded from the internet be digitally signed for execution and be permitted. Locally created scripts can be executed without digital signature. This policy is considered by many to provide a pragmatic balance between usability and security.
REM Restricted: This policy is the most secure available. It blocks the execution of all scripts, whether locally created or downloaded, and all script files. However, individual commands can be executed in the PowerShell environment.
REM Undefined: This policy is used when no execution policy is explicitly set. It allows users to run scripts and offers flexibility, but it is best practice to select a specific policy to provide control and enhance security. If the policy is set as Undefined in all scopes, then it will automatically set the Default restrictions.
REM Unrestricted: This policy grants unrestricted script execution, enabling both local and internet-sourced scripts to run without any restrictions. While convenient for development and testing, it should not be used in production environments owing to the significant security risks it represents.

REM https://github.com/PowerShell/PowerShell/issues/6850#issuecomment-2054266988 (possible cause, solution use an inner cmd.exe) when `chezmoi apply` is used inside a `pwsh.exe` instance, there is an error demanding "Import-Module Microsoft.PowerShell.Security" however upon inclusion there's a failure to import "Import-Module : The following error occurred while loading the extended type data file: Error in TypeData "System.Security.AccessControl.ObjectSecurity": The member AuditToString is already present."
REM https://stackoverflow.com/a/57617119/12603110 - How to enter multiple line of code in CMD (solution use & between lines, REM are comments)
cmd.exe /c "powershell.exe -NoProfile -NonInteractive -Command """Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned;"""; & REM echo more cmd!;"
{{ end -}}